Gemini was used throughout creating this project.

# Rocket NEO Server üöÄ

This is a C++ web server that fetches Near-Earth Object (NEO) data from the NASA API. It can serve all objects in a date range or filter for only those that are potentially hazardous.

## Prerequisites

To run this project, you will need:
* **Git** to clone the repository.
* **Docker Desktop** installed and running on your system (Windows, macOS, or Linux).

## How to Run ‚öôÔ∏è

Running the server is simple with Docker. It handles all the C++ dependencies and compilation for you.

### **Step 1: Clone the Repository**

Open your terminal and clone this project to your local machine.

```bash
git clone [https://github.com/your-username/your-repository-name.git](https://github.com/your-username/your-repository-name.git)
cd your-repository-name
```

### **Step 2: Get a NASA API Key**

This application requires a NASA API key.
1.  Visit [api.nasa.gov](https://api.nasa.gov/) to get your free key.
2.  Copy the key they provide. You'll need it in the next step.

### **Step 3: Build and Run the Docker Container**

Run the following two commands in your terminal from the project's root directory.

1.  **Build the image:** This command compiles the application inside a controlled Docker environment.
    ```bash
    docker build -t rocket-server .
    ```

2.  **Run the container:** Replace `"YOUR_API_KEY_HERE"` with your actual NASA API key.
    ```bash
    docker run -d -p 8080:8080 -e NASA_API_KEY="YOUR_API_KEY_HERE" --name rocket-app rocket-server
    ```
That's it! The server is now running in the background on your machine.

## How to Use the Server üõ∞Ô∏è

You can now make requests to `http://localhost:8080`.

* **Get all NEOs for a date range:**
    ```bash
    curl "http://localhost:8080/api/neo?start_date=2025-10-05&end_date=2025-10-06"
    ```

* **Get only potentially hazardous NEOs:**
    ```bash
    curl "http://localhost:8080/api/neo?start_date=2025-10-05&end_date=2025-10-06&hazardous=true"
    ```

## For Developers: Building Locally

If you want to contribute to the code and build it without Docker, you will need a C++ compiler, CMake, and vcpkg. You can follow the instructions in the `Dockerfile` as a guide for setting up your environment.
